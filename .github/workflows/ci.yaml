name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-backend:
    name: Lint Backend (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: backend
        run: poetry install --no-interaction --no-root

      - name: Run Ruff linting
        working-directory: backend
        run: poetry run ruff check .

      - name: Run Ruff formatting check
        working-directory: backend
        run: poetry run ruff format --check .

  typecheck-backend:
    name: Type Check Backend (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: backend
        run: poetry install --no-interaction --no-root

      - name: Run mypy
        working-directory: backend
        run: poetry run mypy src/

  test-backend:
    name: Test Backend (pytest)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: wyckoff_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: wyckoff_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U wyckoff_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: backend
        run: poetry install --no-interaction --no-root

      - name: Initialize database extensions
        run: |
          PGPASSWORD=test_password psql -h localhost -U wyckoff_user -d wyckoff_db_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"
          PGPASSWORD=test_password psql -h localhost -U wyckoff_user -d wyckoff_db_test -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'

      - name: Set up database
        working-directory: backend
        env:
          DATABASE_URL: postgresql+psycopg://wyckoff_user:test_password@localhost:5432/wyckoff_db_test
        run: |
          poetry run alembic upgrade head

      - name: Run pytest
        working-directory: backend
        env:
          DATABASE_URL: postgresql+psycopg://wyckoff_user:test_password@localhost:5432/wyckoff_db_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ENVIRONMENT: test
          DEBUG: false
        run: poetry run pytest --tb=short -v

  lint-frontend:
    name: Lint Frontend (TypeScript)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

  test-frontend:
    name: Test Frontend (Vitest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run Vitest
        working-directory: frontend
        run: npm run test
