version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: bmad-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-wyckoff_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-wyckoff_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-wyckoff_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bmad-network

  redis:
    image: redis:7-alpine
    container_name: bmad-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - bmad-network

  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: bmad-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-wyckoff_user}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-wyckoff_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ../../backend:/app
      - /app/.venv  # Prevent overwriting venv from host
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: poetry run uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - bmad-network

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: bmad-frontend
    environment:
      VITE_API_URL: http://localhost:${BACKEND_PORT:-8000}
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ../../frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules from host
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0
    networks:
      - bmad-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bmad-network:
    driver: bridge
